using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
 // VF = Variavel de folga
 // VB = Variavel básicas
 
namespace Simplex
{
    public partial class Simplex : Form
    {
        public Simplex()
        {
            InitializeComponent();
        }

        static int VF, VB,ilimitada = 0, validar = 0; 
        float[,] Matriz = new float[0, 0];
        float[,] MatrizIlimitada = new float[0, 0];
        DataTable Tabela = new DataTable();

        private void btGerarMatriz_Click(object sender, EventArgs e)
        {

            if (rdMaximizacao.Checked)
            {
                rdMinimizacao.Enabled = false;
            }
            else if (rdMinimizacao.Checked)
            {
                rdMaximizacao.Enabled = false;
            }
            else { MessageBox.Show("Selecione um tipo!", "Erro"); }


            if (rdMaximizacao.Checked || rdMinimizacao.Checked)
            {

                if (txtVF.Text != "" && txtVB.Text != "") {
                    VF = Convert.ToInt32(txtVF.Text);
                    VB = Convert.ToInt32(txtVB.Text); }

                
                //Verificação de Matriz
                if (VF > 0 && VB > 0)
                {

                   // Inicio DataGrid 

                    //Criando tabela
                    DataTable TabelaAux = new DataTable();
                    TabelaAux = new DataTable();


                    //Tabela recebe coluna Base
                    TabelaAux.Columns.Add("Base", typeof(string));


                    //Tabela recebe colunas [X, F e B]
                    for (int coluna = 1; coluna <= VB; coluna++)
                        TabelaAux.Columns.Add("X" + coluna, typeof(float));

                    for (int coluna = 1; coluna <= VF; coluna++)
                        TabelaAux.Columns.Add("F" + coluna, typeof(float));

                    TabelaAux.Columns.Add("B", typeof(float));


                    //linha recebe quantidade de colunas
                    object[] Linha = new object[TabelaAux.Columns.Count];


                    //tabela recebe a quantidade de linhas e valores
                    for (int linha = 1; linha <= VF; linha++)
                    {
                        Linha[0] = ("F" + linha).ToString();
                        for (int coluna = 1; coluna <= VF + VB + 1; coluna++)
                        {
                            if (TabelaAux.Columns[coluna].ColumnName.ToString() == "F" + linha.ToString()) { Linha[coluna] = 1.0; }
                            else { Linha[coluna] = 0.0; }
                        }
                        TabelaAux.Rows.Add(Linha);
                    }


                    //tabela recebendo linha Z
                    for (int linha = VF; linha <= VF; linha++)
                    {
                        Linha[0] = ("Z").ToString();
                        for (int coluna = 1; coluna < VF + VB + 1; coluna++) { Linha[coluna] = 0.0; }
                        TabelaAux.Rows.Add(Linha);
                    }


                    tabelaMatriz.AllowUserToAddRows = false;
                    tabelaMatriz.AllowUserToOrderColumns = false;
                    tabelaMatriz.DataSource = TabelaAux;
                    tabelaMatriz.Update();
                    tabelaMatriz.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.DisplayedCells);
                    //-------------------------------------------//


                    //tabela principal recebendo endereço da auxiliar 
                    Tabela = TabelaAux;

                    Matriz = new float[VF + 1, VF + VB + 1];
                    MatrizIlimitada = new float[VF + 1, VB + VF + 1];


                    //matriz auxiliar recebendo valores da tabela
                    for (int linha = 0; linha < Matriz.GetLength(0); linha++)
                    {
                        for (int coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                        {
                            Matriz[linha, coluna] = float.Parse(TabelaAux.Rows[linha][coluna + 1].ToString());
                        }
                    }
                }
                else { MessageBox.Show("Matriz Inválida!", "Erro"); rdMaximizacao.Enabled = true; rdMinimizacao.Enabled = true; }
            }
        }



        //Reiniciar(limpar tabela)
        private void btLimparMatriz_Click(object sender, EventArgs e)
        {
            txtVF.Text = String.Empty;
            txtVB.Text = String.Empty;
            tabelaMatriz.Columns.Clear();
            Tabela.Rows.Clear();
            Tabela.Columns.Clear();
            lstResultado.Items.Clear();
            rdMinimizacao.Enabled = true;
            rdMaximizacao.Enabled = true;
            VF = 0;
            VB = 0;
            Matriz = new float[0, 0];
            MatrizIlimitada = new float[0, 0];
            validar = 0;
            ilimitada = 0;
        }
        //-------------------------------------------//



        //Iteraçao
        private void btInteracao_Click(object sender, EventArgs e)
        {
            if (rdMaximizacao.Checked)
            {
                 IteracaoMax(Matriz); 
            }
            else if(rdMinimizacao.Checked) {

               IteracaoMin(Matriz);
            }
            else
            {
                MessageBox.Show("Selecione um tipo!", "Erro");
            }
        }
        //-------------------------------------------//



        //-iteraçao de minizaçao
        public float[,] IteracaoMin(float[,] Matriz)
        {
            int LinhaPivo = 0, ColunaPivo = 0, linha = 0, coluna = 0;
            float Pivo = 0, MaiorValorZ = 0, Aux = 0, PrimeiraDivisao = 0;
            int cont = 0;
            bool igual = true;
           
                //matriz recebe valores da tabela
                for (linha = 0; linha < Matriz.GetLength(0); linha++)
                {
                    for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                    {
                        Matriz[linha, coluna] = float.Parse(Tabela.Rows[linha][coluna + 1].ToString());
                    }
                }


                //criação matriz auxiliar
                float[,] MatrizAux = new float[VF + 1, VB + VF + 1];


                //passagem de valores da matriz principal para a auxiliar
                for (linha = 0; linha < Matriz.GetLength(0); linha++)
                {
                    for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                    {
                        MatrizAux[linha, coluna] = Matriz[linha, coluna];
                    }
                }


                //verificação da linha z se existem valores positivos 
                for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                {
                    if (Matriz[(Matriz.GetLength(0) - 1), coluna] > 0) { cont = 1; }
                }


                if (cont != 1)
                    MessageBox.Show("Não há iterações a serem feitas!", "Erro");


                if (cont == 1)
                {

                    //valor maior da linha z
                    for (linha = (Matriz.GetLength(0) - 1); linha < Matriz.GetLength(0); linha++)
                    {
                        for (coluna = 0; coluna < Matriz.GetLength(1)-1; coluna++)
                        {
                            if ((Matriz[linha, coluna] > 0) && (Matriz[linha, coluna] > MaiorValorZ))
                            {
                                MaiorValorZ = Matriz[linha, coluna]; ColunaPivo = coluna;
                            }
                        }
                    }


                    //valor menor da linha b
                    PrimeiraDivisao = Matriz[0, (Matriz.GetLength(1) - 1)] / Matriz[0, ColunaPivo];
                    for (linha = 0; linha < (Matriz.GetLength(0) - 1); linha++)
                    {
                        for (coluna = Matriz.GetLength(1) - 1; coluna < Matriz.GetLength(1); coluna++)
                        {
                            if (Matriz[linha, coluna] / Matriz[linha, ColunaPivo] < PrimeiraDivisao && Matriz[linha, coluna] / Matriz[linha, ColunaPivo] > 0)
                            {
                                Aux = Matriz[linha, coluna]; LinhaPivo = linha;
                            }
                        }
                    }


                    //pivo
                    Pivo = Matriz[LinhaPivo, ColunaPivo];


                    //divisão da linha pelo pivo
                    for (linha = LinhaPivo; linha <= LinhaPivo; linha++)
                    {
                        for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                        {
                            Matriz[linha, coluna] /= Pivo; MatrizAux[linha, coluna] = Matriz[linha, coluna];
                        }
                    }


                    //coluna pivo sendo zerada
                    for (linha = 0; linha < Matriz.GetLength(0); linha++)
                    {
                        for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                        {
                            if (linha != LinhaPivo)
                            {
                                MatrizAux[linha, coluna] = Matriz[LinhaPivo, coluna] * (-1 * Matriz[linha, ColunaPivo]) + Matriz[linha, coluna];
                            }
                        }
                    }


                    //passagem de valores da matriz auxiliar para a principal
                    for (linha = 0; linha < Matriz.GetLength(0); linha++)
                    {
                        for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                        {
                            Matriz[linha, coluna] = MatrizAux[linha, coluna];
                        }
                    }


                    //tabela recebendo valores da matriz
                    for (linha = 0; linha < Matriz.GetLength(0); linha++)
                    {
                        for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                        {
                            Tabela.Rows[linha][coluna + 1] = (Matriz[linha, coluna].ToString());
                        }
                    }


                    //coluna entrando e linha saindo
                    Tabela.Rows[LinhaPivo][0] = (Tabela.Columns[ColunaPivo + 1].ColumnName.ToString());


                    //verificação se matriz é ilimitada
                    for (linha = 0; linha < Matriz.GetLength(0); linha++)
                    {
                        if (igual != true)
                        {
                            break;
                        }

                        for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                        {
                            if (MatrizIlimitada[linha, coluna] != Matriz[linha, coluna])
                            {
                                igual = false;
                                break;
                            }
                            else { validar = 2; }
                        }
                    }


                    //matriz ilimitada recebendo a primeira iteração da matriz
                    if (ilimitada == 0)
                    {
                        for (linha = 0; linha < Matriz.GetLength(0); linha++)
                        {
                            for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                            {
                                MatrizIlimitada[linha, coluna] = Matriz[linha, coluna];
                            }
                        }
                        ilimitada = 1;
                    }
                    //-------------------------------//
                }
            return (Matriz);
        }
        //-----------------------------//



        //-inicialização da iteração de maximizaão
        public float[,] IteracaoMax(float[,] Matriz)
        {
            int LinhaPivo = 0, ColunaPivo = 0, linha = 0, coluna = 0;
            float Pivo = 0, MenorValorZ = 0, Aux = 0, PrimeiraDivisao = 0;
            int cont = 0;
            bool igual = true;
            

            //matriz recebenfo valores da tabela
            for (linha = 0; linha < Matriz.GetLength(0); linha++)
            {
                for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                {
                    Matriz[linha, coluna] = float.Parse(Tabela.Rows[linha][coluna + 1].ToString());
                }
            }


            //criação da matriz auxiliar
            float[,] MatrizAux = new float[VF + 1, VB + VF + 1];


            //passagem de valores da matriz principal para a matriz auxiliar
            for (linha = 0; linha < Matriz.GetLength(0); linha++)
            {
                for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                {
                    MatrizAux[linha, coluna] = Matriz[linha, coluna];
                }
            }



            //verificação de valores negativos na linha Z
            for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
            {
                if (Matriz[(Matriz.GetLength(0) - 1), coluna] < 0) { cont = 1; }
            }

           

            if (cont != 1)
                MessageBox.Show("Não há iterações a serem feitas!", "Erro");


            if (cont == 1)
            {

                //verificação de menor valor da linha Z
                for (linha = (Matriz.GetLength(0) - 1); linha < Matriz.GetLength(0); linha++)
                {
                    for (coluna = 0; coluna < Matriz.GetLength(1)-1; coluna++)
                    {
                        if ((Matriz[linha, coluna] < 0) && (Matriz[linha, coluna] < MenorValorZ))
                        {
                            MenorValorZ = Matriz[linha, coluna]; ColunaPivo = coluna;
                        }
                    }
                }


                //verificação de menor valor B
                PrimeiraDivisao = Matriz[0, (Matriz.GetLength(1) - 1)] / Matriz[0, ColunaPivo];
                for (linha = 0; linha < (Matriz.GetLength(0) - 1); linha++)
                {
                    for (coluna = Matriz.GetLength(1) - 1; coluna < Matriz.GetLength(1); coluna++)
                    {
                        if (Matriz[linha, coluna] / Matriz[linha, ColunaPivo] < PrimeiraDivisao && Matriz[linha, coluna] / Matriz[linha, ColunaPivo] > 0)
                        {
                            Aux = Matriz[linha, coluna]; LinhaPivo = linha;
                        }
                    }
                }


                //pivo
                Pivo = Matriz[LinhaPivo, ColunaPivo];


                //divisão da linha pelo pivo
                for (linha = LinhaPivo; linha <= LinhaPivo; linha++)
                {
                    for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                    {
                        Matriz[linha, coluna] /= Pivo; MatrizAux[linha, coluna] = Matriz[linha, coluna];
                    }
                }


                //coluna do pivo sendo zerada
                for (linha = 0; linha < Matriz.GetLength(0); linha++)
                {
                    for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                    {
                        if (linha != LinhaPivo)
                        {
                            MatrizAux[linha, coluna] = Matriz[LinhaPivo, coluna] * (-1 * Matriz[linha, ColunaPivo]) + Matriz[linha, coluna];
                        }
                    }
                }


                //passagem de valores da matriz auxiliar para a matriz principal
                for (linha = 0; linha < Matriz.GetLength(0); linha++)
                {
                    for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                    {
                        Matriz[linha, coluna] = MatrizAux[linha, coluna];
                    }
                }


                //tabela recebendo valores da matriz
                for (linha = 0; linha < Matriz.GetLength(0); linha++)
                {
                    for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                    {
                        Tabela.Rows[linha][coluna + 1] = (Matriz[linha, coluna].ToString());
                    }
                }


                //coluna entrando e linha saindo
                Tabela.Rows[LinhaPivo][0] = (Tabela.Columns[ColunaPivo + 1].ColumnName.ToString());


                //verificação de matriz para saber se é ilimitada
                for (linha = 0; linha < Matriz.GetLength(0); linha++)
                {
                    if (igual != true)
                    {
                        break;
                    }

                    for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                    {
                        if (MatrizIlimitada[linha, coluna] != Matriz[linha, coluna])
                        {
                            igual = false;
                            break;
                        }
                        else { validar = 2; }
                    }
                }


                //matriz ilimitada recebendo primeira iteração da matriz
                if (ilimitada == 0)
                {
                    for (linha = 0; linha < Matriz.GetLength(0); linha++)
                    {
                        for (coluna = 0; coluna < Matriz.GetLength(1); coluna++)
                        {
                            MatrizIlimitada[linha, coluna] = Matriz[linha, coluna];
                        }
                    }
                    ilimitada = 1;
                }
                //------------------------//

            }
            return (Matriz);
        }
        //-----------------------------------------//

        //-inicialização da geração do resultado
        private void btResultado_Click(object sender, EventArgs e)
        {
            lstResultado.Items.Clear();
            if (Tabela.Rows.Count > 0)
            {
                for (int linha = 0; linha < Tabela.Rows.Count; linha++)
                {
                    lstResultado.Items.Add(Tabela.Rows[linha][0].ToString() + " = " + float.Parse(Tabela.Rows[linha][VF + VB + 1].ToString()).ToString("N1"));
                }
            }
            else
                MessageBox.Show("Crie uma Matriz!", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        //--------------------------------//
    }
}
